@model Resume_App.Models.ResumeModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Resume</title>
    <style>
        /* Resume styles */
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        h1, h2 {
            color: #333;
        }

        ul {
            list-style: none;
            padding: 0;
        }

        li {
            padding: 5px 0;
        }

        /* Tic-Tac-Toe game styles */
        #game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-gap: 5px;
            margin-top: 20px;
        }

        .cell {
            width: 100px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            border: 2px solid #333;
            cursor: pointer;
        }

        .cell.taken {
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <h1>@Model.Name</h1>
    <p>Email: <a href="mailto:@Model.Email">@Model.Email</a></p>
    <p>@Model.Bio</p>

    <h2>Skills</h2>
    <ul>
        @foreach (var skill in Model.Skills)
        {
                <li>@skill</li>
        }
    </ul>

    <h2>Mini-Game: Tic-Tac-Toe</h2>
    <div id="game-board">
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
    </div>
    <p id="game-status"></p>

    <script>
        // Tic-Tac-Toe Game Logic
        const cells = document.querySelectorAll("[data-cell]");
        const statusText = document.getElementById("game-status");
        let isXTurn = true;
        const winningCombinations = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6],
        ];

        function checkWin(currentClass) {
            return winningCombinations.some(combination => {
                return combination.every(index => {
                    return cells[index].classList.contains(currentClass);
                });
            });
        }

        function checkDraw() {
            return [...cells].every(cell => {
                return cell.classList.contains("X") || cell.classList.contains("O");
            });
        }

        function handleClick(e) {
            const cell = e.target;
            const currentClass = isXTurn ? "X" : "O";
            cell.textContent = currentClass;
            cell.classList.add(currentClass, "taken");
            if (checkWin(currentClass)) {
                statusText.textContent = `${currentClass} Wins!`;
                cells.forEach(cell => cell.removeEventListener("click", handleClick));
            } else if (checkDraw()) {
                statusText.textContent = "It's a Draw!";
            } else {
                isXTurn = !isXTurn;
            }
        }

        cells.forEach(cell => {
            cell.addEventListener("click", handleClick, { once: true });
        });
    </script>
</body>
</html>
